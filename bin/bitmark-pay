#!/bin/sh
# run the payment process

ERROR()
{
  echo error: $*
  exit 1
}

USAGE()
{
  [ -z "$1" ] || echo error: $*
  echo usage: $(basename "$0") '<options> <pay_id> <address> <amount> {<address> <amount>}...'
  echo '       --help           -h         this message'
  echo '       --verbose        -v         more messages'
  echo '       --network=NET    -n NET     set the network ['"${network}"']'
  echo '       --config-dir=DIR -c DIR     set the config directory ['"${config_dir}"']'
  echo '       --debug          -d         show debug information'
  exit 1
}

# check network
set_network()
{
  case "$1" in
    (bitmark|live|production)
      network=bitmark
      ;;
    (test|testing|testnet)
      network=testing
      ;;
    (dev|devnet|devel|development)
      network=development
      ;;
    (local)
      # local also uses the development bitcoin chain
      network=local
      ;;
    (*)
      USAGE "invalid network name: $1"
      ;;
  esac
}

make_payment()
{
  java ${java_options} -jar "${application}" ${json} --config-dir="${config_dir}" --net="${network}" pay "$@"
}

account_info()
{
  java ${java_options} -jar "${application}" ${json} --config-dir="${config_dir}" --net="${network}" info
}


# main program

verbose=no
frame=yes
network=testing
#java_options='-Dlog4j.configurationFile=log4j2.yaml'
java_options=
json=
application=%%BITMARK_PAY_JAR%%
config_dir=

if [ -n "${XDG_CONFIG_HOME}" -a -d "${XDG_CONFIG_HOME}" ]
then
  config_dir="${XDG_CONFIG_HOME}/bitmark-pay"
  mkdir -p -m 0700 "${config_dir}"
fi

getopt=
for g in /usr/local/bin/getopt /usr/local/opt/gnu-getopt/bin/getopt /usr/bin/getopt
do
  [ -x "${g}" ] && getopt="${g}" && break
done
[ -x "${getopt}" ] || ERROR 'no suitable getopt was found'
args=$(${getopt} -o hvn:c:jd --long=help,verbose,network:,config-dir:,json,debug -- "$@") ||exit 1

# replace the arguments with the parsed values
eval set -- "${args}"

while :
do
  case "$1" in
    (-v|--verbose)
      verbose=yes
      ;;

    (-n|--network)
      set_network "$2"
      shift
      ;;

    (-c|--config-dir)
      config_dir="$2"
      [ -z "${config_dir}" ] && USAGE "empty --config-dir option"
      [ -d "${config_dir}" ] || USAGE "directory does not exist for: --config-dir=$2"
      shift
      ;;

    (-j|--json)
      json='--json'
      ;;

    (-d|--debug)
      debug=yes
      ;;

    (--)
      shift
      break
      ;;

    (-h|--help)
      USAGE
      ;;

    (*)
      USAGE "invalid argument: $1"
      ;;
  esac
  shift
done

[ X"${debug}" = X"yes" ] && set -x

[ -z "${config_dir}" ] && ERROR "configuration directory cannot be blank"
[ -d "${config_dir}" ] || ERROR "missing configuration directory: ${config_dir}"

# no arguments, just display info
if [ $# -eq 0 ]
then
  account_info
  return 0
fi

[ $# -lt 3 ] && USAGE 'insufficient arguments'

pay_id="$1"; shift
[ $(( $# % 2 )) -ne 0 ] && USAGE 'incorrect account/amount paring'

make_payment "${pay_id}" "$@"
